(ns solita.etp.service.suomifi-viestit-test
  (:require [clojure.test :as t]
            [solita.etp.test-system :as ts]
            [clojure.java.io :as io]
            [solita.etp.service.valvonta-kaytto.suomifi-viestit :as valvonta-kaytto.suomifi-viestit]
            [solita.etp.service.suomifi-viestit :as service.suomifi-viestit]
            [clojure.string :as str]
            [solita.etp.service.pdf :as pdf])
  (:import (java.time LocalDate)
           (org.w3c.dom Node)
           (org.xmlunit.diff Comparison$Detail ComparisonListener ComparisonResult ComparisonType DOMDifferenceEngine DifferenceEvaluator DifferenceEvaluators)
           (org.xmlunit.builder Input)
           (org.xmlunit.util Predicate)))

(t/use-fixtures :each ts/fixture)

(defn- handle-request [request-resource response-resource response-status]
  (fn [request]
    (t/is (= (-> request str/trim) (-> request-resource io/resource slurp str/trim)))
    {:body   (-> response-resource io/resource slurp)
     :status response-status}))

(defn- in-tree? [node-name ^Node node]
  (cond
    (= node-name (.getNodeName node)) true
    (nil? (.getParentNode node)) false
    :else (in-tree? node-name (.getParentNode node))))

(defn- in-tree-filter [interesting-tree]
  (reify Predicate
    (test [_ node]
      (if (= "soapenv:Envelope" (->> node (cast Node) .getNodeName)) ; Can't skip the top level element
        true
        (in-tree? interesting-tree node)))))

(defn- difference-listener []
  (reify ComparisonListener (comparisonPerformed [_ comparison _]
                              (t/is false comparison))))    ; ComparisonListener is called when comparison fails. Fail the test

(defn- empty-node? [^Comparison$Detail target]
  (str/blank? (-> target .getTarget .getTextContent)))

(defn- handle-request-with-xml-compare [request-resource response-resource response-status]
  (fn [request]
    (let [wanted (-> request-resource io/resource Input/fromURL .build)
          actual (-> request str Input/fromString .build)]
      ;; Header contains attributes and text elements that are generated by encryption
      ;; Check that they're in place, but ignore values
      (doto (DOMDifferenceEngine.)
        (.setNodeFilter (in-tree-filter "soapenv:Header"))
        (.setDifferenceEvaluator (reify DifferenceEvaluator
                                   (evaluate [_ comparison outcome]
                                     (if (and (contains? #{ComparisonType/ATTR_VALUE ComparisonType/TEXT_VALUE} (-> comparison .getType))
                                              (= (-> comparison .getTestDetails empty-node?) (-> comparison .getControlDetails empty-node?)))
                                       ComparisonResult/EQUAL
                                       (.evaluate DifferenceEvaluators/Default comparison outcome)))))
        (.addDifferenceListener (difference-listener))
        (.compare wanted actual))
      ;; Check the body but ignore the wsu:Id
      (doto (DOMDifferenceEngine.)
        (.setNodeFilter (in-tree-filter "soapenv:Body"))
        (.setDifferenceEvaluator (reify DifferenceEvaluator
                                   (evaluate [_ comparison outcome]
                                     (if (= "wsu:Id" (-> comparison .getTestDetails .getTarget .getNodeName))
                                       ComparisonResult/EQUAL
                                       (.evaluate DifferenceEvaluators/Default comparison outcome)))))
        (.addDifferenceListener (difference-listener))
        (.compare wanted actual))
      {:body   (-> response-resource io/resource slurp)
       :status response-status})))

(def valvonta {:id                  1
               :rakennustunnus      "103515074X"
               :katuosoite          "Hämeenkatu 10"
               :postinumero         "333100"
               :postitoimipaikka-fi "Tampere"
               :postitoimipaikka-sv "Tammerfors"
               })

(def toimenpide {:type-id       1
                 :id            2
                 :diaarinumero  "ARA-05.03.02-2021-31"
                 :valvonta-id   1
                 :deadline-date (LocalDate/of 2022 1 1)})

(def osapuoli {:id               1
               :etunimi          "Testi"
               :sukunimi         "Vastaanottaja"
               :henkilotunnus    "010120-3319"
               :jakeluosoite     "Testitie 1 A"
               :postinumero      "00000"
               :postitoimipaikka "Kaupunki"
               :maa              "FI"})

(defonce document (pdf/generate-pdf->bytes {:layout "pdf/ipost-address-page.html"}))

(def config {:viranomaistunnus    "Organisaatio"
             :palvelutunnus       "OR"
             :tulostustoimittaja  "Edita"
             :varmenne            "OR"
             :yhteyshenkilo-nimi  "Henkilö"
             :yhteyshenkilo-email "testi.kayttaja@organisaatio.or"
             :laskutus-tunniste   "0000"
             :laskutus-salasana   "0000"})

(t/deftest send-message-to-osapuoli-test
  (with-bindings {#'service.suomifi-viestit/post! (handle-request "suomifi/viesti-request.xml"
                                                                             "suomifi/viesti-response.xml"
                                                                             202)
                  #'valvonta-kaytto.suomifi-viestit/now                      (fn [] "2021-09-08T06:21:03.625667Z")
                  #'valvonta-kaytto.suomifi-viestit/bytes->base64            (fn [_] "dGVzdGk=")}

    (t/is (= (:sanoma-tunniste (valvonta-kaytto.suomifi-viestit/send-message-to-osapuoli! valvonta toimenpide osapuoli document config))
             "ARA-05.03.02-2021-31-ETP-KV-1-2-PERSON-1"))))

(t/deftest send-message-to-osapuoli-id-already-exists-test
  (with-bindings {#'service.suomifi-viestit/post! (handle-request "suomifi/viesti-request.xml"
                                                                             "suomifi/viesti-id-already-exists-response.xml"
                                                                             200)
                  #'valvonta-kaytto.suomifi-viestit/now                      (fn []
                                                               "2021-09-08T06:21:03.625667Z")
                  #'valvonta-kaytto.suomifi-viestit/bytes->base64            (fn [_]
                                                               "dGVzdGk=")}
    (t/is (thrown-with-msg?
            clojure.lang.ExceptionInfo
            #"Sending suomifi message ARA-05.03.02-2021-31-ETP-KV-1-2-PERSON-1 failed."
            (valvonta-kaytto.suomifi-viestit/send-message-to-osapuoli! valvonta toimenpide osapuoli document config)))))

(t/deftest send-message-to-osapuoli-with-signing-test
  (with-bindings {#'service.suomifi-viestit/post! (handle-request-with-xml-compare "suomifi/viesti-request-signed.xml"
                                                                                              "suomifi/viesti-response.xml"
                                                                                              202)
                  #'valvonta-kaytto.suomifi-viestit/now                      (fn [] "2021-09-08T06:21:03.625667Z")
                  #'valvonta-kaytto.suomifi-viestit/bytes->base64            (fn [_] "dGVzdGk=")}
    (let [config-with-keystore (merge config {:keystore-file     (.getPath (io/resource "suomifi/store.jks"))
                                              :keystore-password "password"
                                              :keystore-alias    "default"})]
      (t/is (= (:sanoma-tunniste (valvonta-kaytto.suomifi-viestit/send-message-to-osapuoli! valvonta toimenpide osapuoli document config-with-keystore))
               "ARA-05.03.02-2021-31-ETP-KV-1-2-PERSON-1")))))
